//
//  MessagesViewController.m
//  MessagesExtension
//
//  Created by Allan Zhang on 9/12/16.
//  Copyright Â© 2016 Allan Zhang. All rights reserved.
//

#import "MessagesViewController.h"


@interface MessagesViewController ()

@end

@implementation MessagesViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.

    
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Conversation Handling


- (void)willBecomeActiveWithConversation:(MSConversation *)conversation
{
    [super willBecomeActiveWithConversation:conversation];
    [self presentViewControllerForConversation:conversation withPresentationStyle: self.presentationStyle];
    
}

-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    
    // Use this method to configure the extension and restore previously stored state.
    

}

- (void)presentViewControllerForConversation: (MSConversation *)conversation
                       withPresentationStyle: (MSMessagesAppPresentationStyle)presentationStyle
{
    UIViewController *viewController;

    if (presentationStyle == MSMessagesAppPresentationStyleCompact){
        viewController = (LimitedViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"LimitedViewController"];
    } else {
       
        viewController = (FullViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"FullViewController"];
    }
    
    for (UIViewController *child in self.childViewControllers){
        [child willMoveToParentViewController:nil];
        [child.view removeFromSuperview];
        [child removeFromParentViewController];
    }

    [self addChildViewController:viewController];
    
    
    viewController.view.frame = self.view.bounds;
    viewController.view.translatesAutoresizingMaskIntoConstraints = NO;
    viewController.view.center = self.view.center;
    [self.view addSubview:viewController.view];
    [self.view bringSubviewToFront:viewController.view];

    
    [viewController didMoveToParentViewController:self];
    
    NSLog(@"%@", viewController.class);
    NSLog(@"done");
    
    //self.view.backgroundColor = [UIColor yellowColor];
    
    
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
}

-(void)willResignActiveWithConversation:(MSConversation *)conversation { //after viewWillDisappear and viewDidiDisappear
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
}



-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    
    // Use this method to trigger UI updates in response to the message.
    NSLog(@"like when someone else sends and you receive the message");
}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.
    
    // Use this to clean up state related to the deleted message.
}

-(void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called before the extension transitions to a new presentation style.
    
    // Use this method to prepare for the change in presentation style.
    if ([self activeConversation]){
        MSConversation *conversation = [self activeConversation];
        [self presentViewControllerForConversation:conversation withPresentationStyle:presentationStyle];
    }
    
}

-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called after the extension transitions to a new presentation style.
    
    // Use this method to finalize any behaviors associated with the change in presentation style.
}

#pragma mark - Delegate method after creation finished

- (void)didClickOnFinish
{
    NSLog(@"shows did click on Finish from messageView");
}


@end
